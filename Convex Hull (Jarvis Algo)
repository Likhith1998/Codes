#include <iostream>
#include <bits/stdc++.h>
using namespace std;

struct Point {
int x;
int y;
};

int orientation(Point p,Point q,Point r )
{
    int value;
    value = (q.y-p.y)*(q.x-r.x)-(q.y-r.y)*(q.x-p.x);
    if(value==0) return 0;
    return (value>0)?1:2;
}

void convexHull(Point points[],int n)
{
    if(n<3) return;
    int l=0;
    vector<Point> hull;
    for(int i=1;i<n;i++)
    {
        if(points[i].x<points[l].x) l=i;
    }
    int p=l,q;
    do{
        q=(p+1)%n;
        hull.push_back(points[p]);
        for(int i=0;i<n;i++)
        {
            if(orientation(points[p],points[i],points[q])==2)
            q=i;
        }
        p=q;
    }while(p!=l);
    for(int i=0;i<hull.size();i++)
    {
        cout<<hull[i].x<<" "<<hull[i].y<<endl;  
    }
}

int main()
{
    Point points[] = {{0, 3}, {2, 2}, {1, 1}, {2, 1},
                      {3, 0}, {0, 0}, {3, 3}};
    int n = sizeof(points)/sizeof(points[0]);
    convexHull(points, n);
    return 0;
    
}
